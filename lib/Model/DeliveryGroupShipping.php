<?php
/**
 * DeliveryGroupShipping
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * delivery_checkout API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DeliveryGroupShipping Class Doc Comment
 *
 * @category Class
 * @description How the package should be shipped to the end customer.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DeliveryGroupShipping implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeliveryGroupShipping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addons' => '\OpenAPI\Client\Model\CarrierAddon[]',
        'carrier' => 'string',
        'carrier_product_id' => 'string',
        'delivery_addons' => '\OpenAPI\Client\Model\DeliveryGroupDeliveryAddon[]',
        'delivery_type' => 'string',
        'meta' => 'array<string,string>',
        'product' => 'string',
        'supports' => '\OpenAPI\Client\Model\Supports',
        'warehouse' => '\OpenAPI\Client\Model\DeliveryGroupWarehouse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'addons' => null,
        'carrier' => null,
        'carrier_product_id' => null,
        'delivery_addons' => null,
        'delivery_type' => null,
        'meta' => null,
        'product' => null,
        'supports' => null,
        'warehouse' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addons' => 'addons',
        'carrier' => 'carrier',
        'carrier_product_id' => 'carrier_product_id',
        'delivery_addons' => 'delivery_addons',
        'delivery_type' => 'delivery_type',
        'meta' => 'meta',
        'product' => 'product',
        'supports' => 'supports',
        'warehouse' => 'warehouse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addons' => 'setAddons',
        'carrier' => 'setCarrier',
        'carrier_product_id' => 'setCarrierProductId',
        'delivery_addons' => 'setDeliveryAddons',
        'delivery_type' => 'setDeliveryType',
        'meta' => 'setMeta',
        'product' => 'setProduct',
        'supports' => 'setSupports',
        'warehouse' => 'setWarehouse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addons' => 'getAddons',
        'carrier' => 'getCarrier',
        'carrier_product_id' => 'getCarrierProductId',
        'delivery_addons' => 'getDeliveryAddons',
        'delivery_type' => 'getDeliveryType',
        'meta' => 'getMeta',
        'product' => 'getProduct',
        'supports' => 'getSupports',
        'warehouse' => 'getWarehouse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addons'] = $data['addons'] ?? null;
        $this->container['carrier'] = $data['carrier'] ?? null;
        $this->container['carrier_product_id'] = $data['carrier_product_id'] ?? null;
        $this->container['delivery_addons'] = $data['delivery_addons'] ?? null;
        $this->container['delivery_type'] = $data['delivery_type'] ?? null;
        $this->container['meta'] = $data['meta'] ?? null;
        $this->container['product'] = $data['product'] ?? null;
        $this->container['supports'] = $data['supports'] ?? null;
        $this->container['warehouse'] = $data['warehouse'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addons
     *
     * @return \OpenAPI\Client\Model\CarrierAddon[]|null
     */
    public function getAddons()
    {
        return $this->container['addons'];
    }

    /**
     * Sets addons
     *
     * @param \OpenAPI\Client\Model\CarrierAddon[]|null $addons Shipping products addons that are enabled by default. Can be configured in the Merchant Admin tool.
     *
     * @return self
     */
    public function setAddons($addons)
    {
        $this->container['addons'] = $addons;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Name of the shipping company.
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets carrier_product_id
     *
     * @return string|null
     */
    public function getCarrierProductId()
    {
        return $this->container['carrier_product_id'];
    }

    /**
     * Sets carrier_product_id
     *
     * @param string|null $carrier_product_id Identifier of chosen carrier product, can be used for merchant-specific shipping methods mappings. If external method identifier is defined on carrier product, its value is passed in this field. Otherwise, shipping method from carrier product is passed.
     *
     * @return self
     */
    public function setCarrierProductId($carrier_product_id)
    {
        $this->container['carrier_product_id'] = $carrier_product_id;

        return $this;
    }

    /**
     * Gets delivery_addons
     *
     * @return \OpenAPI\Client\Model\DeliveryGroupDeliveryAddon[]|null
     */
    public function getDeliveryAddons()
    {
        return $this->container['delivery_addons'];
    }

    /**
     * Sets delivery_addons
     *
     * @param \OpenAPI\Client\Model\DeliveryGroupDeliveryAddon[]|null $delivery_addons Selected delivery addons.
     *
     * @return self
     */
    public function setDeliveryAddons($delivery_addons)
    {
        $this->container['delivery_addons'] = $delivery_addons;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type Type of delivery (pickup, instore, mailbox, delivery).
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return array<string,string>|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param array<string,string>|null $meta Carrier specific metadata related to the shipping option, for example addons.
     *
     * @return self
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Name of the shipping product.
     *
     * @return self
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets supports
     *
     * @return \OpenAPI\Client\Model\Supports|null
     */
    public function getSupports()
    {
        return $this->container['supports'];
    }

    /**
     * Sets supports
     *
     * @param \OpenAPI\Client\Model\Supports|null $supports supports
     *
     * @return self
     */
    public function setSupports($supports)
    {
        $this->container['supports'] = $supports;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return \OpenAPI\Client\Model\DeliveryGroupWarehouse|null
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param \OpenAPI\Client\Model\DeliveryGroupWarehouse|null $warehouse warehouse
     *
     * @return self
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


